// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BanpoFri.Data
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct facilityidata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static facilityidata GetRootAsfacilityidata(ByteBuffer _bb) { return GetRootAsfacilityidata(_bb, new facilityidata()); }
  public static facilityidata GetRootAsfacilityidata(ByteBuffer _bb, facilityidata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public facilityidata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Facilityidx { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateFacilityidx(int facilityidx) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, facilityidx); return true; } else { return false; } }
  public int Moneycount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateMoneycount(int moneycount) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, moneycount); return true; } else { return false; } }
  public bool Isopen { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateIsopen(bool isopen) { int o = __p.__offset(8); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(isopen ? 1 : 0)); return true; } else { return false; } }

  public static Offset<BanpoFri.Data.facilityidata> Createfacilityidata(FlatBufferBuilder builder,
      int facilityidx = 0,
      int moneycount = 0,
      bool isopen = false) {
    builder.StartTable(3);
    facilityidata.AddMoneycount(builder, moneycount);
    facilityidata.AddFacilityidx(builder, facilityidx);
    facilityidata.AddIsopen(builder, isopen);
    return facilityidata.Endfacilityidata(builder);
  }

  public static void Startfacilityidata(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFacilityidx(FlatBufferBuilder builder, int facilityidx) { builder.AddInt(0, facilityidx, 0); }
  public static void AddMoneycount(FlatBufferBuilder builder, int moneycount) { builder.AddInt(1, moneycount, 0); }
  public static void AddIsopen(FlatBufferBuilder builder, bool isopen) { builder.AddBool(2, isopen, false); }
  public static Offset<BanpoFri.Data.facilityidata> Endfacilityidata(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BanpoFri.Data.facilityidata>(o);
  }
};


}
