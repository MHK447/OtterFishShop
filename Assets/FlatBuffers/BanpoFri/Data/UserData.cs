// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BanpoFri.Data
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct UserData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static UserData GetRootAsUserData(ByteBuffer _bb) { return GetRootAsUserData(_bb, new UserData()); }
  public static UserData GetRootAsUserData(ByteBuffer _bb, UserData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UserData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Money { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMoneyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMoneyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMoneyArray() { return __p.__vector_as_array<byte>(4); }
  public int Cash { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateCash(int cash) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, cash); return true; } else { return false; } }
  public long Lastlogintime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateLastlogintime(long lastlogintime) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, lastlogintime); return true; } else { return false; } }
  public long Curplaydatetime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateCurplaydatetime(long curplaydatetime) { int o = __p.__offset(10); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, curplaydatetime); return true; } else { return false; } }
  public int Stageidx { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public bool MutateStageidx(int stageidx) { int o = __p.__offset(12); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, stageidx); return true; } else { return false; } }

  public static Offset<BanpoFri.Data.UserData> CreateUserData(FlatBufferBuilder builder,
      StringOffset moneyOffset = default(StringOffset),
      int cash = 0,
      long lastlogintime = 0,
      long curplaydatetime = 0,
      int stageidx = 1) {
    builder.StartTable(5);
    UserData.AddCurplaydatetime(builder, curplaydatetime);
    UserData.AddLastlogintime(builder, lastlogintime);
    UserData.AddStageidx(builder, stageidx);
    UserData.AddCash(builder, cash);
    UserData.AddMoney(builder, moneyOffset);
    return UserData.EndUserData(builder);
  }

  public static void StartUserData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddMoney(FlatBufferBuilder builder, StringOffset moneyOffset) { builder.AddOffset(0, moneyOffset.Value, 0); }
  public static void AddCash(FlatBufferBuilder builder, int cash) { builder.AddInt(1, cash, 0); }
  public static void AddLastlogintime(FlatBufferBuilder builder, long lastlogintime) { builder.AddLong(2, lastlogintime, 0); }
  public static void AddCurplaydatetime(FlatBufferBuilder builder, long curplaydatetime) { builder.AddLong(3, curplaydatetime, 0); }
  public static void AddStageidx(FlatBufferBuilder builder, int stageidx) { builder.AddInt(4, stageidx, 1); }
  public static Offset<BanpoFri.Data.UserData> EndUserData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BanpoFri.Data.UserData>(o);
  }
  public static void FinishUserDataBuffer(FlatBufferBuilder builder, Offset<BanpoFri.Data.UserData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedUserDataBuffer(FlatBufferBuilder builder, Offset<BanpoFri.Data.UserData> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
